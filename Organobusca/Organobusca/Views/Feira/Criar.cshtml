@model Organobusca.Models.Feira

@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_DashboardFeiranteLayout.cshtml";
}
<style>
    #map {
        width: 100%;
        height: 280px;
        padding: 10px;
    }
</style>
<h2>Criar nova feira</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.nome, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.nome, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.nome, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <span class="control-label col-md-2">Localização</span>
            <div class="col-md-10">
                <div class="form-inline">
                    <input id="autocomplete" class="form-control" type="text" placeholder="Digite endereço">
                    <input id="submit" value="Encontrar" type="button" class="btn btn-success">
                </div>
                <div id="map"></div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.rua, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.rua, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.rua, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.cidade, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.cidade, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.cidade, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.cep, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.cep, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.cep, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.numero, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.numero, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.numero, "", new { @class = "text-danger" })
            </div>
        </div>

        <div id="diascp">
            <div class="form-group">
                <label class="control-label col-md-2">Horário de funcionamento</label>
                <div class="col-md-10">
                    <select name="dia[]">
                        <option value="1">Domingo</option>
                        <option value="2">Segunda-feira</option>
                        <option value="3">Terça-feira</option>
                        <option value="4">Quarta-feira</option>
                        <option value="5">Quinta-feira</option>
                        <option value="6">Sexta-feira</option>
                        <option value="7">Sábado</option>
                    </select>

                    <label for="hora_inicio">Hora início</label>
                    <input name="hora_inicio" type="time" />

                    <label for="hora_inicio">Hora fim</label>
                    <input name="hora_fim" type="time" />

                    <button type="button" class="btn btn-success add">Adicionar novo horário</button>
                </div>
            </div>
        </div>

        <div class="form-group">
            <input type="hidden" name="latitude" id="latitude" />
            <input type="hidden" name="longitude" id="longitude" />
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Criar" class="btn btn-success" />
            </div>
        </div>
    </div>
}

<div id="modelo-dia" class="form-group" style="display: none;">
    <label class="control-label col-md-2">Horário de funcionamento</label>
    <div class="col-md-10">
        <select name="dia">
            <option value="1">Domingo</option>
            <option value="2">Segunda-feira</option>
            <option value="3">Terça-feira</option>
            <option value="4">Quarta-feira</option>
            <option value="5">Quinta-feira</option>
            <option value="6">Sexta-feira</option>
            <option value="7">Sábado</option>
        </select>

        <label for="hora_inicio">Hora início</label>
        <input name="hora_inicio" type="time" />

        <label for="hora_inicio">Hora fim</label>
        <input name="hora_fim" type="time" />

        <button type="button" class="btn btn-success add">Adicionar novo horário</button>
    </div>
</div>

@section scripts
{
    <script>
        function AddFunction() {
            var teste = $("#modelo-dia").clone();
            $("#diascp").append(teste.show());
        }

        $(document).ready(function () {
            $(".add").click(AddFunction);
        });
    </script>
}

<script>
        function initMap() {

            var geocoder = new google.maps.Geocoder();

            var autocomplete = new google.maps.places.Autocomplete(
                document.getElementById('autocomplete'), { types: ['geocode'] });

            var map = new google.maps.Map(document.getElementById('map'), {
                center: { lat: -8.0624203, lng: -34.9270747 }, /* Recife */
                zoom: 13
            })

            marker = new google.maps.Marker({
                map: map,
                position: { lat: 0, lng: 0 },
                draggable: true
            });
            marker.setVisible(false);

            var infowindow = new google.maps.InfoWindow;

            /* mudar marker ao digitar endereco */
            document.getElementById('submit').addEventListener('click', function () { addressToGeocode(geocoder, map); });
            function addressToGeocode(geocoder, map) {
                console.log(autocomplete.getPlace());
                var address = autocomplete.getPlace().formatted_address;
                geocoder.geocode({ 'address': address }, function (results, status) {
                    if (status == 'OK') {
                        map.setCenter(results[0].geometry.location);
                        marker.setVisible(true);
                        marker.setPosition(results[0].geometry.location);
                        map.setZoom(17);
                        infowindow.setContent(results[0].formatted_address);
                        infowindow.open(map, marker);
                        fillAddressFields(results[0]);
                    } else {
                        alert("Nenhum lugar encontrado com esse endereço");
                    }
                });

            }

            /* mudar endereco ao arrastar marker*/
            google.maps.event.addListener(marker, 'dragend', function (evt) {
                var location = {
                    lat: evt.latLng.lat(),
                    lng: evt.latLng.lng()
                }
                geocodeToAddress(geocoder, map, infowindow, location);
            });

            function geocodeToAddress(geocoder, map, infowindow, location) {
                geocoder.geocode({ 'location': location }, function (results, status) {
                    if (status == 'OK') {
                        if (results[1]) {
                            infowindow.setContent(results[1].formatted_address);
                            infowindow.open(map, marker);
                            fillAddressFields(results[1]);
                        } else {
                            alert("Local não encontrado");
                        }
                    } else {
                        alert("Geocoder falhou");
                    }
                });
            }

            function fillAddressFields(results) {
                var latlng = [results.geometry.location.lat(), results.geometry.location.lng()];
                document.getElementById("latitude").value = latlng[0];
                document.getElementById("longitude").value = latlng[1];
            }
        }
</script>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAs3V5BDT2RqWxKznEvIBdT4WKNQ5_lLf0&libraries=places&callback=initMap" async defer></script>
<div>
</div>
